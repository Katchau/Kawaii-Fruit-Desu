class ClientTest is subclass of MyTestCase
instance variables
	cli: Client := new Client("Annelise Duchamp", <Big>);
	col: Collective := new Collective("Almada");
operations
  public testConstructor: () ==> ()
  	testConstructor() == (
    	assertEqual("Annelise Duchamp", cli.name);
    	assertEqual(<Big>, cli.basketRequest);
    	assertEqual(false, cli.hasPaidAnual);
    	assertEqual(false, cli.hasCollected);
    	assertEqual(false, cli.hasCancelled);
    	    	
    	IO`println("-- Passed constructor");
  	);
  	
  public makeFakeCollective: () ==> ()
  	makeFakeCollective() == (
  		-- adicionar farmers e quantidades suficientes para fornecer 1 cesto big
			dcl p1: Product := new Product("apple");
			dcl p2: Product := new Product("banana");
			dcl p3: Product := new Product("lettuce");
			dcl p4: Product := new Product("grapefruit");
			dcl p5: Product := new Product("kale");
			dcl p6: Product := new Product("pumpkin");
			dcl p7: Product := new Product("pear");
			dcl p8: Product := new Product("papaya");
	  
	  	col.addFarmer(new Farmer("Campónio", 
	  		{p1 |-> 10000,
	  		p2 |-> 10000,
	  		p3 |-> 10000,
	  		p4 |-> 10000,
	  		p5 |-> 10000,
	  		p6 |-> 10000,
	  		p7 |-> 10000,
	  		p8 |-> 10000
	  		}));  	
  	);
  
  public testApplyCollective: () ==> ()
  	testApplyCollective() == (	  	
	  	
	  	makeFakeCollective();
	  	
  		assertEqual(<Big>, cli.basketRequest);
  		assertEqual(0, col.smallBaskets);
  		assertEqual(0, col.bigBaskets);
  		assertTrue(col.canAddAssociate(col.smallBaskets +1,col.bigBaskets));
  		
	  	assertTrue(cli.applyCollective(col));
	  	assertTrue(not cli.undefinedCollective);	  	
  		IO`println("-- Passed apply to collective");
  	);
  	
  public testQuitCollective: () ==> ()
  	testQuitCollective() == (
	  	assertTrue(cli.quitCollective());
	  	assertTrue(cli.undefinedCollective);	  	
  		IO`println("-- Passed quit collective");
  	);
  	
  public testGetBasket: () ==> ()
  	testGetBasket() == (
	  	assertTrue(cli.applyCollective(col));
  		cli.getBasket();
  		assertTrue(cli.hasCollected);
  		IO`println("-- Passed get basket");
  	);
  	
  public testCancelBasket:() ==> ()
  	testCancelBasket() == (
  		cli.cancelBasket();
  		assertTrue(cli.hasCancelled);
  		IO`println("-- Passed cancel basket")
  	);
  
  
 	public testNewWeekAndYear: () ==> ()
  	testNewWeekAndYear() == (
  		cli.newWeek();
  		assertTrue(not cli.hasCancelled);
  		assertTrue(not cli.hasCollected);
  		assertTrue(cli.undefinedBasket);
   
			cli.newYear();
  		assertTrue(not cli.hasCancelled);
  		assertTrue(not cli.hasCollected);
  		assertTrue(cli.undefinedBasket);
  		assertTrue(not cli.hasPaidAnual);
  	);

	public testAll: () ==> ()
  	testAll() == (
  		IO`println("Testing client class functions");
  		testConstructor();
			testApplyCollective();
			testQuitCollective();
			testGetBasket();
			testCancelBasket();
			testNewWeekAndYear();
  		IO`println("Client class passed all tests!");
  	);

end ClientTest