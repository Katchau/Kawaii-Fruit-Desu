class BasketTest is subclass of MyTestCase
instance variables
	p1: Product := new Product("apple");
	p2: Product := new Product("banana");
	p3: Product := new Product("lettuce");
	b: Basket := new Basket({p1|->100, p2|->300}, <Big>);
operations
  public testConstructor: () ==> ()
  	testConstructor() == (
    	assertEqual({p1,p2},dom b.content);
    	assertEqual(400, b.totalWeight);
    	assertEqual({p1|->100, p2|->300}, b.content);
    	assertEqual(<Big>, b.size);
    	IO`println("-- Passed constructor");
  	);
  
  public testAddRemoveProduct: () ==> ()
  	testAddRemoveProduct() == (
  		assertEqual({p1,p2}, dom b.content);
  		assertEqual({p1|->100, p2|->300}, b.content);
  		
  		-- add
  		b.add(p3, 1000);
  		assertTrue(p3 in set dom b.content);
  		assertEqual(1000, b.content(p3));
  		assertEqual({p1|->100, p2|->300} ++ {p3 |-> 1000}, b.content);
  		assertEqual(1400, b.totalWeight);
  		IO`println("-- Passed add new product to basket");
  		
  		-- remove
  		b.remove(p3);
  		assertTrue(p3 not in set dom b.content);
  		assertEqual({p1|->100, p2|->300}, b.content);
  		assertEqual(400, b.totalWeight);
  		IO`println("-- Passed remove from basket");
  	);
  	
  public testUpdateProductQuantity: () ==> ()
  	testUpdateProductQuantity() == (
  		
  		-- product already in basket
  		b.updateProductQuantity(p2, 1000);
  		assertTrue(p2 in set dom b.content);
  		assertEqual(1300, b.content(p2));
  		assertEqual({p1|->100, p2|->1300}, b.content);
  		assertEqual(1400, b.totalWeight);
  		IO`println("-- Passed update product quantity");
  		
  	);
  	
    public testBasketGets: () ==> ()
  	testBasketGets() == (
  		assertEqual(100, b.getQuantity(p1));
  		IO`println("-- Passed gets");
  	);
  

	public testAll: () ==> ()
  	testAll() == (
  		IO`println("Testing Basket Class Functions");
  		testConstructor();
  		testBasketGets();
  		testAddRemoveProduct();
  		testUpdateProductQuantity();
  		IO`println("Basket class passed all tests!");
  	);

end BasketTest