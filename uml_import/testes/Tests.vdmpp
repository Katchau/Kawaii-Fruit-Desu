class Tests
operations
	public Tests: () ==> Tests
		Tests() == return self;
	public testeCancro1: () ==> nat1
		testeCancro1() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			farm1.addProduct(prod2,69);
			return farm1.requestProduction(prod2,120);
		);
	public testeCancro2: () ==> ()
		testeCancro2() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			dcl cl: Collective := new Collective("Far far away land");
			farm1.addProduct(prod2,69);
			cl.addFarmer(farm1);
			IO`println(cl);
			cl.removeFarmer(farm1);
			IO`println(cl);
		);
	public testeCancro3: () ==> ()
		testeCancro3() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			dcl farm2: Farmer := new Farmer("Lol", {prod2 |-> 100});
			dcl cl: Collective := new Collective("Far far away land");
			farm1.addProduct(prod2,69);
			cl.addFarmer(farm1);
			cl.addFarmer(farm2);
			IO`println(cl);
			cl.removeFarmer(farm1);
			IO`println(cl);
			cl.removeFarmer(farm2);
			IO`println(cl);
		);
		-- create t := new Tests() print t.testeCancro4()
		public testeCancro4: () ==> ()
		testeCancro4() == (
			dcl map1: Utils`ProdGrams := {new Product("banana") |-> 950, new Product("banana2") |-> 1000, new Product("banana3") |-> 1000, new Product("banana4") |-> 1000, new Product("banana5") |-> 1000, new Product("banana6") |-> 1000, new Product("banana7") |-> 1000, new Product("banana8") |-> 1000};
			dcl farm1: Farmer := new Farmer("Gay", map1);
			dcl cl: Collective := new Collective("Far far away land");
			cl.addFarmer(farm1);
			IO`println(cl);
		);
		
		public testeCancro5: () ==> ()
		testeCancro5() == (
			dcl map1: Utils`ProdGrams := {new Product("banana") |-> 950, new Product("banana2") |-> 1000, new Product("banana3") |-> 1000, new Product("banana4") |-> 1000, new Product("banana5") |-> 1000, new Product("banana6") |-> 1000, new Product("banana7") |-> 1000, new Product("banana8") |-> 1000};
			dcl farm1: Farmer := new Farmer("Gay", map1);
			dcl cl: Collective := new Collective("Far far away land");
			dcl cli: Client := new Client("Lol", <Small>);
			cl.addFarmer(farm1);
			IO`println(cl.addAssociate(cli));
			IO`println(cl);
			cl.removeAssociate(cli);
			IO`println(cl);
		);
		
end Tests
