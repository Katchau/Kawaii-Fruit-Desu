class Farmer
instance variables
	public name: Utils`string;
  public production: Utils`ProdGrams; -- products and the corresponding production of it
  public collective: Collective := new Collective("fake");
  public hasCollective: bool := false;

operations
	public Farmer: Utils`string * Utils`ProdGrams ==> Farmer
		Farmer(n, prods) == (
			name := n;
			production := prods;
			return self
		)
	pre prods <> {|->} and forall gr in set rng prods & gr > 0
	post name = n and prods = production;

  public apply : Collective  ==> ()
  	apply(cl) == (
  		hasCollective := true;
  		collective := cl
  	)
  	pre hasCollective = false
  	post hasCollective and collective = cl;

  public  quit : ()  ==> ()
  	quit() == (
  		hasCollective := false;
  		collective := new Collective("fake")
  	)
  	pre hasCollective
  	post not hasCollective and collective.location = "fake";
   
  public updateCollectiveInfo: () ==> ()
  	updateCollectiveInfo() == (
  		dcl cl: Collective := collective;
  		cl.removeFarmer(self);
  		cl.addFarmer(self);
  	)
  	pre hasCollective
  	post hasCollective;
  
  public addProduct: Product * real ==> ()
  	addProduct(prod, gr) == production := production ++ {prod |-> gr}
  	pre prod not in set dom production and gr > 0
  	post production = production~ ++ {prod |-> gr} and prod in set dom production and gr = production(prod);

	public removeProduct: Product ==> ()
		removeProduct(prod) == production := {prod} <-: production
		pre prod in set dom production
		post production = {prod} <-: production~ and prod not in set dom production;

end Farmer
