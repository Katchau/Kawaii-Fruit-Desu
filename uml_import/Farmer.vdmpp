class Farmer
instance variables
	name: Utils`string;
  public production: Utils`ProdGrams; -- products and the corresponding production of it
  --collective:Collective;

operations
	public Farmer: Utils`string * Utils`ProdGrams ==> Farmer
		Farmer(n, prods) == (
			name := n;
			production := prods;
			return self
		)
	pre prods <> {|->} and forall gr in set rng prods & gr > 0
	post name = n and prods = production;

  public  apply : ()  ==> bool
  	apply() ==
    	is not yet specified;

  public  quit : ()  ==> ?
  	quit() ==
    	is not yet specified;
    
  public addProduct: Product * nat1 ==> ()
  	addProduct(prod, gr) == production := production ++ {prod |-> gr}
  	pre prod not in set dom production and gr > 0
  	post production = production~ ++ {prod |-> gr} and prod in set dom production and gr = production(prod);

	public removeProduct: Product ==> ()
		removeProduct(prod) == production := {prod} <-: production
		pre prod in set dom production
		post production = {prod} <-: production~ and prod not in set dom production;

  public requestProduction : Product * nat1 ==> nat1
  	requestProduction(prod, quantity) == 
  		if quantity < production(prod) then return quantity
  		else return production(prod)
  	pre prod in set dom production and quantity > 0
  	post RESULT <= production(prod) and RESULT <= quantity and
  		if quantity < production(prod) then RESULT = quantity
  		else RESULT = production(prod);
  	


end Farmer
