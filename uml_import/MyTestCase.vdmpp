class MyTestCase
operations
	public MyTestCase: () ==> MyTestCase
		MyTestCase() == return self;
	public testeCancro1: () ==> nat1
		testeCancro1() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			farm1.addProduct(prod2,69);
			return farm1.requestProduction(prod2,120);
		);
	public testeCancro2: () ==> ()
		testeCancro2() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			dcl cl: Collective := new Collective("Far far away land");
			farm1.addProduct(prod2,69);
			cl.addFarmer(farm1);
			IO`println(cl);
			cl.removeFarmer(farm1);
			IO`println(cl);
		);
	public testeCancro3: () ==> ()
		testeCancro3() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl farm1: Farmer := new Farmer("Gay", {prod1 |-> 100});
			dcl farm2: Farmer := new Farmer("Lol", {prod2 |-> 100});
			dcl cl: Collective := new Collective("Far far away land");
			farm1.addProduct(prod2,69);
			cl.addFarmer(farm1);
			cl.addFarmer(farm2);
			IO`println(cl);
			cl.removeFarmer(farm1);
			IO`println(cl);
			cl.removeFarmer(farm2);
			IO`println(cl);
		);
end MyTestCase
