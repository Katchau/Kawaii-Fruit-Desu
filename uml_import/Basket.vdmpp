class Basket

instance variables
  public totalWeight: real;
  public content: Utils`ProdGrams;
  public size:Utils`BasketType;

functions
	public getTotalWeight: Utils`ProdGrams -> real
		getTotalWeight(prods) == if prods = {|->} then 0
		else let p in set dom prods in prods(p) + getTotalWeight({p} <-: prods)

operations
	public Basket: Utils`ProdGrams * Utils`BasketType  ==> Basket
	Basket(prods, s) == (
		content := prods;
		totalWeight := getTotalWeight(prods);
		size := s;
		return self
	)
	post size = s and content = prods;

  public  add : Product * real ==> () -- por alteracao dos parametros no uml -- alterar return no uml
	  add(prod, gr) == (
	    content := content ++ {prod |-> gr};
	    totalWeight := getTotalWeight(content)
	    )
	pre  gr > 0 and prod not in set dom content
	post prod in set dom content and totalWeight = totalWeight~ + gr; 
	  
	  
  public  updateProductQuantity  : Product * real ==> () -- criar no uml
	  updateProductQuantity(prod, gr) == (
	  	content := content ++ {prod |-> (content(prod) + gr)};
	  	totalWeight := getTotalWeight(content)
	  )
  pre  content(prod) + gr > 0 and prod in set dom content and prod in set dom content
	post prod in set dom content and content(prod) = content~(prod) + gr;
    

  public  remove : Product ==> () -- alterar return no uml
	  remove(prod) ==(
	    content := {prod} <-: content;
	    totalWeight := getTotalWeight(content)
		)
	pre prod in set dom content
	post prod not in set dom content and totalWeight = totalWeight~ - content~(prod);

  public  getQuantity : Product ==> real -- alterar return no uml
  	getQuantity(prod) == return content(prod)
  pre prod in set dom content
  post prod in set dom content and RESULT = content(prod);


end Basket
