class MyTestCase
operations
	public MyTestCase: () ==> MyTestCase
		MyTestCase() == return self;
	public testeCancro1: () ==> bool
		testeCancro1() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			return prod1.is_equal(prod2);
		);
		public testSameProd: () ==> bool
		testSameProd() == (
			dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("banana");
			return prod1.is_equal(prod2);
		);
		
		public testBasketQuant: () ==> int
		testBasketQuant() == (
		  dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl bsk: Basket := new Basket({prod1, prod2}, 1, {prod1 |-> 2, prod2 |-> 3}, <Big>);
			return bsk.getQuantity(prod1);
		);
		public testBasketFruits: () ==> set of Product
		testBasketFruits() == (
		  dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl bsk: Basket := new Basket({prod1, prod2}, 1, {prod1 |-> 2, prod2 |-> 3}, <Big>);
			return bsk.getTotalFruits();
		);
		public testAddProd: () ==> int
		testAddProd() == (
		  dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl bsk: Basket := new Basket({prod1}, 1, {prod1 |-> 2}, <Big>);
			bsk.add(prod2, 4);
			return bsk.getQuantity(prod2);
		);
		public testRemProd: () ==> set of Product
		testRemProd() == (
		  dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl bsk: Basket := new Basket({prod1, prod2}, 1, {prod1 |-> 2, prod2 |-> 3}, <Big>);
			bsk.remove(prod2);
			return bsk.getTotalFruits();
		);
		public testUpdateProd: () ==> int
		testUpdateProd() == (
		  dcl prod1: Product := new Product("banana");
			dcl prod2: Product := new Product("apple");
			dcl bsk: Basket := new Basket({prod1, prod2}, 1, {prod1 |-> 2, prod2 |-> 3}, <Big>);
			bsk.updateProductQuantity(prod2, 5);
			return bsk.getQuantity(prod2);
		);
	
end MyTestCase
