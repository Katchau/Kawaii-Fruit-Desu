class Basket

instance variables
  product:set of (Product);
  content:int;
  totalWeight: map Product to int;
  size:Utils`BasketType;

operations
	public Basket: set of (Product) * int * map Product to int * Utils`BasketType  ==> Basket
	Basket(prod, cont, tw, s) == (
		product := prod;
		content := cont;
		totalWeight := tw;
		size := s;
		return self
	);

  public  add : Product * int ==> () -- por alteracao dos parametros no uml -- alterar return no uml
	  add(prod, gr) == (
	    product := product union {prod};
	    if prod in set dom totalWeight 
	    then totalWeight := totalWeight ++ {prod |-> (totalWeight(prod) + gr)}
	    else totalWeight := totalWeight ++ {prod |-> gr}
	    --return true
	    )
	  pre  gr > 0 and prod not in set product -- ñ é preciso isto é nat1 xD
	  post prod in set dom totalWeight and prod in set product; 
	  
	  
  public  updateProductQuantity  : Product * int ==> () -- criar no uml
	  updateProductQuantity(prod, gr) == (
	  	totalWeight := totalWeight ++ {prod |-> (totalWeight(prod) + gr)}
	  )
	  pre  gr >= 0 and prod in set product and prod in set dom totalWeight
	  post prod in set product and prod in set dom totalWeight and totalWeight(prod) = totalWeight~(prod) + gr;
    

  public  remove : Product ==> () -- alterar return no uml
	  remove(prod) ==(
	  	product := product \ {prod};
	    totalWeight := {prod} <-: totalWeight;
	    --return true
		)
	pre prod in set product
	post prod not in set product and prod not in set dom totalWeight ;

  public  getQuantity : Product ==> int -- alterar return no uml
  	getQuantity(prod) == return totalWeight(prod)
  pre prod in set product
  post prod in set product and RESULT = totalWeight(prod);

  public  getTotalFruits : ()  ==> set of Product
  	getTotalFruits() == return product
  post RESULT = product;


end Basket
